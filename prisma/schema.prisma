generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Post {
  id        BigInt    @id @default(sequence())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String?
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  BigInt
  comments  Comment[]
  likes     Like[]
  reshares  Reshare[]
  media     Media[]
}

model Profile {
  id        BigInt    @id @default(sequence())
  bio       String?
  dob       DateTime?
  location  String?
  link      String?
  user      User      @relation(fields: [userId], references: [id])
  userId    BigInt    @unique
}

model User {
  id            BigInt         @id @default(sequence())
  email         String         @unique
  username      String         @unique
  displayname   String?
  password      String
  posts         Post[]
  profile       Profile?
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  messages      Message[]
  chats         Chat[]
  followers     Follower[]     @relation("UserFollowers")
  following     Follower[]     @relation("UserFollowing")
  settings      UserSettings?
  Reshare       Reshare[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Comment {
  id        BigInt   @id @default(sequence())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    BigInt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  BigInt
}

model Like {
  id        BigInt   @id @default(sequence())
  post      Post     @relation(fields: [postId], references: [id])
  postId    BigInt
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  createdAt DateTime @default(now())
}

model Reshare {
  id        BigInt   @id @default(sequence())
  post      Post     @relation(fields: [postId], references: [id])
  postId    BigInt
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  createdAt DateTime @default(now())
}

model Notification {
  id        BigInt   @id @default(sequence())
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  postId    BigInt?
  commentId BigInt?
}

model Message {
  id        BigInt   @id @default(sequence())
  createdAt DateTime @default(now())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  BigInt
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    BigInt
}

model Chat {
  id        BigInt    @id @default(sequence())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  messages  Message[]
}

model Follower {
  id          BigInt   @id @default(sequence())
  followerId  BigInt
  followingId BigInt
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
}

model Media {
  id        BigInt   @id @default(sequence())
  url       String
  post      Post     @relation(fields: [postId], references: [id])
  postId    BigInt
  createdAt DateTime @default(now())
}

model UserSettings {
  id        BigInt   @id @default(sequence())
  userId    BigInt   @unique
  user      User     @relation(fields: [userId], references: [id])
  theme     String?
  language  String?
  privacy   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
